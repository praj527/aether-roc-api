// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/types"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
