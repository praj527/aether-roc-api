// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/types"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"M9S+Mq/tJvafAAAA//90zSblySYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
